from fractions import Fraction
# Definition for a point.
class Point(object):
    def __init__(self, a=0, b=0):
        self.x = a
        self.y = b

def get_points(data):
    return [Point(x,y) for x, y in data]

class Solution(object):
    def get_k(self, p1, p2):
        x1, y1 = p1.x, p1.y
        x2, y2 = p2.x, p2.y
        xd = x1 - x2
        yd = y1 - y2
        if xd == 0:
            return (None, x1)
        k = Fraction(yd, xd)
        b = y1 - k * x1
        return '%s^%s' % (k, b)

    def get_n(self, x):
        """
        x = n * (n - 1) / 2
        2x = n * (n - 1)  
        """
        lo = 0
        hi = x
        while lo < hi:
            mid = (lo + hi) / 2
            prod = mid * (mid - 1)
            if prod < x:
                lo = mid + 1
            else:
                hi = mid
        return lo


    def maxPoints(self, points):
        """
        :type points: List[Point]
        :rtype: int
        """
        counter = {}
        # y = kx + b        
        # k = (y1 - y2) / (x1-x2)

        n = 0
        L = len(points)
        p_to_key = {}
        while n < L:
            prev = points[n]
            for i in range(n + 1, L):
                cur = points[i]
                key = self.get_k(prev, cur)
                if key in counter:
                    counter[key] += 1
                else:
                    counter[key] = 1
            n += 1
        mc = sorted(counter.values())[-1] 
        return self.get_n(mc * 2)
if __name__ == '__main__':
    samples = [
    ([[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]], 4), #4 4*3/2 = 6 n*(n-1) = 6 * 2
    ([[1,1],[2,2],[3,3]], 3), #3
    ([[0,-12],[5,2],[2,5],[0,-5],[1,5],[2,-2],[5,-4],[3,4],[-2,4],[-1,4],[0,-5],[0,-8],[-2,-1],[0,-11],[0,-9]], 6)
    , # 6
    ([[1,1],[1,1],[2,3]], 3),
    ([[1,1],[1,1],[2,3],[2,3]], 4),
    ([[1,1],[1,1],[1,1],[2,3],[2,3]],5), # ???
    ([[40,-23],[9,138],[429,115],[50,-17],[-3,80],[-10,33],[5,-21],[-3,80],[-6,-65],[-18,26],[-6,-65],[5,72],[0,77],[-9,86],[10,-2],[-8,85],[21,130],[18,-6],[-18,26],[-1,-15],[10,-2],[8,69],[-4,63],[0,3],[-4,40],[-7,84],[-8,7],[30,154],[16,-5],[6,90],[18,-6],[5,77],[-4,77],[7,-13],[-1,-45],[16,-5],[-9,86],[-16,11],[-7,84],[1,76],[3,77],[10,67],[1,-37],[-10,-81],[4,-11],[-20,13],[-10,77],[6,-17],[-27,2],[-10,-81],[10,-1],[-9,1],[-8,43],[2,2],[2,-21],[3,82],[8,-1],[10,-1],[-9,1],[-12,42],[16,-5],[-5,-61],[20,-7],[9,-35],[10,6],[12,106],[5,-21],[-5,82],[6,71],[-15,34],[-10,87],[-14,-12],[12,106],[-5,82],[-46,-45],[-4,63],[16,-5],[4,1],[-3,-53],[0,-17],[9,98],[-18,26],[-9,86],[2,77],[-2,-49],[1,76],[-3,-38],[-8,7],[-17,-37],[5,72],[10,-37],[-4,-57],[-3,-53],[3,74],[-3,-11],[-8,7],[1,88],[-12,42],[1,-37],[2,77],[-6,77],[5,72],[-4,-57],[-18,-33],[-12,42],[-9,86],[2,77],[-8,77],[-3,77],[9,-42],[16,41],[-29,-37],[0,-41],[-21,18],[-27,-34],[0,77],[3,74],[-7,-69],[-21,18],[27,146],[-20,13],[21,130],[-6,-65],[14,-4],[0,3],[9,-5],[6,-29],[-2,73],[-1,-15],[1,76],[-4,77],[6,-29]],25),
    ([[3,1],[12,3],[3,1],[-6,-1]], 4),
    ([[1,2], [3,4], [5,6]],3),
    ([[0,0],[94911151,94911150],[94911152,94911151]], 2),
    ([[0,9],[138,429],[115,359],[115,359],[-30,-102],[230,709],[-150,-686],[-135,-613],[-60,-248],[-161,-481],[207,639],[23,79],[-230,-691],[-115,-341],[92,289],[60,336],[-105,-467],[135,701],[-90,-394],[-184,-551],[150,774]], 12)
    ] 
    for data, expect in samples:
        print 'real:%s' % Solution().maxPoints(get_points(data)), 'expect:%s' % expect
        print '-' * 10
    mc = 6
    print Solution().get_n((mc + 3)*2)